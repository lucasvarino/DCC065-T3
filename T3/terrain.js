import * as THREE from  'three';
import { insertAndReturnVoxel} from './voxel.js';

const dimPlaneExecution = 35;
const dimPlaneModelagem = 10;
const indiceVoxelN1 = 4;
const indiceVoxelN2 = 4;
let x,y,z;

const matrix35x35 = [
                  [2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2], // 01
                  [2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2], // 02
                  [2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2], // 03
                  [2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2,2], // 04
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2], // 05
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2,2,2], // 06
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2], // 07
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2], // 08
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2], // 09
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2], // 10
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 11
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2,2], // 12
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 13
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 14
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 15
                  [2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 16
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 17
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 18
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,2,2,2], // 19
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2], // 20
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2], // 21
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 22
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 23
                  [2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 24
                  [2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 25
                  [2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2], // 26
                  [2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2], // 27
                  [2,2,2,2,2,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,2,2,2,2,2], // 28
                  [2,2,2,2,2,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2], // 29
                  [2,2,2,2,2,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2], // 30
                  [2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2], // 31
                  [2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2], // 32
                  [2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2], // 33
                  [2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2], // 34 
                  [2,2,2,2,2,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2]  // 35
]

export function getDimPlane(ambiente) {
  if(ambiente === 'execution'){
    return dimPlaneExecution;
  } else {
    return dimPlaneModelagem;
  }
  
}

export function insertGrade(scene){
  const gridHelper = new THREE.GridHelper( dimPlaneModelagem, dimPlaneModelagem );
  scene.add( gridHelper )
}

export function generateTerrain(scene){
  let countX = 0
  x = - Math.floor(matrix35x35.length / 2);
  y = 0.5;
  z = - Math.floor(matrix35x35.length / 2);
  for (let i = 0; i < matrix35x35.length; i++) {
    for (let j = 0; j < matrix35x35.length; j++) {
        if(matrix35x35[i][j] === 2){
          insertAndReturnVoxel(x,y,z,scene,indiceVoxelN2)
          insertAndReturnVoxel(x,y + 1,z,scene,indiceVoxelN2)
        } else {
          if(matrix35x35[i][j] === 1){
            insertAndReturnVoxel(x,y,z,scene,indiceVoxelN1)
          }
        }
        x++;
        countX++;
        if(countX === matrix35x35.length){
          x = - Math.floor(matrix35x35.length / 2);
          countX = 0;
        }
    }
    z++;
  }
}